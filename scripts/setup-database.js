const { createClient } = require('@supabase/supabase-js');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();

async function setupDatabase() {
    console.log('üöÄ Setting up database...');
    
    const supabase = createClient(
        process.env.SUPABASE_URL,
        process.env.SUPABASE_SERVICE_KEY
    );

    try {
        // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå SQL Schema
        const schemaPath = path.join(__dirname, '..', 'database', 'schema.sql');
        
        try {
            const schema = await fs.readFile(schemaPath, 'utf8');
            console.log('üìÑ Schema file loaded successfully');
            
            // ‡∏£‡∏±‡∏ô SQL Schema (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Supabase ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô SQL Editor)
            console.log('‚ö†Ô∏è  Please run the schema manually in Supabase SQL Editor');
            console.log('üìÅ Schema file location:', schemaPath);
            
        } catch (fileError) {
            console.log('üìÑ Schema file not found, using inline schema...');
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const { data: tables, error: tablesError } = await supabase
                .from('information_schema.tables')
                .select('table_name')
                .eq('table_schema', 'public');

            if (tablesError) {
                console.error('‚ùå Error checking existing tables:', tablesError);
                return;
            }

            const existingTables = tables.map(t => t.table_name);
            console.log('üìã Existing tables:', existingTables);
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        const { data: connectionTest, error: connectionError } = await supabase
            .from('users')
            .select('count')
            .limit(1);

        if (connectionError) {
            console.log('‚ö†Ô∏è  Users table not found, please create the schema first');
        } else {
            console.log('‚úÖ Database connection successful');
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        const { data: categories, error: categoriesError } = await supabase
            .from('categories')
            .select('*')
            .limit(1);

        if (categoriesError || !categories || categories.length === 0) {
            console.log('üìÇ Creating default categories...');
            
            const defaultCategories = [
                { name: 'Food & Dining', name_th: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', icon: 'üçΩÔ∏è', color: '#FF6B6B' },
                { name: 'Groceries', name_th: '‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô', icon: 'üõí', color: '#4ECDC4' },
                { name: 'Transportation', name_th: '‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á', icon: 'üöó', color: '#45B7D1' },
                { name: 'Shopping', name_th: '‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á', icon: 'üõçÔ∏è', color: '#96CEB4' },
                { name: 'Healthcare', name_th: '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', icon: '‚öïÔ∏è', color: '#FFEAA7' },
                { name: 'Entertainment', name_th: '‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á', icon: 'üé¨', color: '#DDA0DD' },
                { name: 'Utilities', name_th: '‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ', icon: 'üí°', color: '#98D8C8' },
                { name: 'Education', name_th: '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤', icon: 'üìö', color: '#F7DC6F' },
                { name: 'Personal Care', name_th: '‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á', icon: 'üíÑ', color: '#BB8FCE' },
                { name: 'Others', name_th: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ', icon: 'üì¶', color: '#AED6F1' }
            ];

            const { error: insertError } = await supabase
                .from('categories')
                .insert(defaultCategories);

            if (insertError) {
                console.error('‚ùå Error creating categories:', insertError);
            } else {
                console.log('‚úÖ Default categories created successfully');
            }
        } else {
            console.log('‚úÖ Categories already exist');
        }

        console.log('üéâ Database setup completed!');
        
    } catch (error) {
        console.error('‚ùå Database setup failed:', error);
        process.exit(1);
    }
}