// services/line-service.js
const { Client } = require('@line/bot-sdk');
const axios = require('axios');
const config = require('../config/config');

const client = new Client(config.line);

class LineService {
  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
  async replyMessage(replyToken, message) {
    try {
      let messageObject;
      
      if (typeof message === 'string') {
        messageObject = {
          type: 'text',
          text: message
        };
      } else {
        messageObject = message;
      }

      await client.replyMessage(replyToken, messageObject);
      return true;
    } catch (error) {
      console.error('Error replying message:', error);
      throw error;
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Push
  async pushMessage(userId, message) {
    try {
      let messageObject;
      
      if (typeof message === 'string') {
        messageObject = {
          type: 'text',
          text: message
        };
      } else {
        messageObject = message;
      }

      await client.pushMessage(userId, messageObject);
      return true;
    } catch (error) {
      console.error('Error pushing message:', error);
      throw error;
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Multicast (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô)
  async multicastMessage(userIds, message) {
    try {
      let messageObject;
      
      if (typeof message === 'string') {
        messageObject = {
          type: 'text',
          text: message
        };
      } else {
        messageObject = message;
      }

      await client.multicast(userIds, messageObject);
      return true;
    } catch (error) {
      console.error('Error multicasting message:', error);
      throw error;
    }
  }

  // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å LINE
  async downloadImage(messageId) {
    try {
      const stream = await client.getMessageContent(messageId);
      const chunks = [];
      
      return new Promise((resolve, reject) => {
        stream.on('data', (chunk) => {
          chunks.push(chunk);
        });
        
        stream.on('end', () => {
          const buffer = Buffer.concat(chunks);
          resolve(buffer);
        });
        
        stream.on('error', (error) => {
          reject(error);
        });
      });
    } catch (error) {
      console.error('Error downloading image:', error);
      throw error;
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Profile ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  async getUserProfile(userId) {
    try {
      const profile = await client.getProfile(userId);
      return profile;
    } catch (error) {
      console.error('Error getting user profile:', error);
      throw error;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
  createDailySummaryFlexMessage(summaryData) {
    return {
      type: 'flex',
      altText: '‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô',
      contents: {
        type: 'bubble',
        hero: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: 'üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
              weight: 'bold',
              size: 'xl',
              color: '#ffffff'
            }
          ],
          backgroundColor: '#42A5F5',
          paddingAll: 'md'
        },
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'box',
              layout: 'horizontal',
              contents: [
                {
                  type: 'text',
                  text: '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°',
                  flex: 1,
                  size: 'md'
                },
                {
                  type: 'text',
                  text: `${summaryData.totalExpenses?.toLocaleString() || 0} ‡∏ö‡∏≤‡∏ó`,
                  flex: 1,
                  size: 'md',
                  weight: 'bold',
                  color: '#E53E3E',
                  align: 'end'
                }
              ],
              margin: 'md'
            },
            {
              type: 'box',
              layout: 'horizontal',
              contents: [
                {
                  type: 'text',
                  text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à',
                  flex: 1,
                  size: 'md'
                },
                {
                  type: 'text',
                  text: `${summaryData.receiptCount || 0} ‡πÉ‡∏ö`,
                  flex: 1,
                  size: 'md',
                  align: 'end'
                }
              ],
              margin: 'md'
            }
          ]
        }
      }
    };
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  createMonthlySummaryFlexMessage(summaryData) {
    const topCategories = summaryData.topCategories?.slice(0, 3) || [];
    
    const categoryContents = topCategories.map(category => ({
      type: 'box',
      layout: 'horizontal',
      contents: [
        {
          type: 'text',
          text: category.category,
          flex: 2,
          size: 'sm'
        },
        {
          type: 'text',
          text: `${category.amount?.toLocaleString() || 0} ‡∏ö‡∏≤‡∏ó`,
          flex: 1,
          size: 'sm',
          align: 'end',
          color: '#666666'
        }
      ],
      margin: 'sm'
    }));

    return {
      type: 'flex',
      altText: '‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
      contents: {
        type: 'bubble',
        hero: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: 'üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
              weight: 'bold',
              size: 'xl',
              color: '#ffffff'
            }
          ],
          backgroundColor: '#66BB6A',
          paddingAll: 'md'
        },
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'box',
              layout: 'horizontal',
              contents: [
                {
                  type: 'text',
                  text: '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
                  flex: 1,
                  size: 'md'
                },
                {
                  type: 'text',
                  text: `${summaryData.totalExpenses?.toLocaleString() || 0} ‡∏ö‡∏≤‡∏ó`,
                  flex: 1,
                  size: 'md',
                  weight: 'bold',
                  color: '#E53E3E',
                  align: 'end'
                }
              ],
              margin: 'md'
            },
            {
              type: 'box',
              layout: 'horizontal',
              contents: [
                {
                  type: 'text',
                  text: '‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô',
                  flex: 1,
                  size: 'md'
                },
                {
                  type: 'text',
                  text: `${summaryData.averagePerDay?.toFixed(0) || 0} ‡∏ö‡∏≤‡∏ó`,
                  flex: 1,
                  size: 'md',
                  align: 'end'
                }
              ],
              margin: 'md'
            },
            {
              type: 'separator',
              margin: 'lg'
            },
            {
              type: 'text',
              text: '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î',
              weight: 'bold',
              size: 'md',
              margin: 'lg'
            },
            ...categoryContents
          ]
        }
      }
    };
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
  createMainMenuMessage() {
    return {
      type: 'text',
      text: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
      quickReply: {
        items: [
          {
            type: 'action',
            action: {
              type: 'message',
              label: '‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
              text: '‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'
            }
          },
          {
            type: 'action',
            action: {
              type: 'message',
              label: '‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ',
              text: '‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'
            }
          },
          {
            type: 'action',
            action: {
              type: 'message',
              label: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î',
              text: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
            }
          },
          {
            type: 'action',
            action: {
              type: 'message',
              label: '‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
              text: '‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
            }
          }
        ]
      }
    };
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  createHelpMessage() {
    return {
      type: 'text',
      text: `ü§ñ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Bot ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢

üì∑ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
- ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ Bot
- Bot ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

üìä ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
- ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" - ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
- ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ" - ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
- ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î" - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤

üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö
- ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
- ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏°‡πà‡∏û‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏ö
- ‡πÅ‡∏™‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ`
    };
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE API
  async checkConnection() {
    try {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API endpoint
      const response = await axios.get('https://api.line.me/v2/bot/info', {
        headers: {
          'Authorization': `Bearer ${config.line.channelAccessToken}`
        }
      });
      
      console.log('LINE Bot connection successful:', response.data);
      return true;
    } catch (error) {
      console.error('LINE Bot connection failed:', error.response?.data || error);
      throw error;
    }
  }
}

module.exports = new LineService();